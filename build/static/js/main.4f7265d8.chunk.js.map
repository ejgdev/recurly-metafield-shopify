{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StContainer","styled","Box","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","backgroundAttachment","height","display","alignItems","StPaper","Paper","textAlign","padding","background","TextHeader","marginBottom","App","useState","code","setCode","testResponse","setTestResponse","handleStartFetch","a","axios","post","response","data","handleClick","handleTestFetch","get","test","handle2Click","CssBaseline","Container","maxWidth","elevation","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","TextField","id","label","onChange","e","target","value","fullWidth","Button","color","size","startIcon","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iXAcMA,EAAcC,YAAOC,IAAPD,CAAY,CAC9BE,gBAAiB,4GACjBC,iBAAkB,YAClBC,mBAAoB,gBACpBC,eAAgB,QAChBC,qBAAsB,QACtBC,OAAQ,QACRC,QAAS,OACTC,WAAY,WAGRC,EAAUV,YAAOW,IAAPX,CAAc,CAC5BY,UAAW,SACXC,QAAS,OACTC,WAAY,0BAERC,EAAaf,YAAO,MAAPA,CAAc,CAC/BgB,aAAc,SAGD,SAASC,IAAO,IAAD,EACFC,mBAAS,IADP,mBACpBC,EADoB,KACdC,EADc,OAEYF,mBAAS,IAFrB,mBAErBG,EAFqB,KAEPC,EAFO,KAQtBC,EAAgB,uCAAG,4BAAAC,EAAA,sEACAC,IAAMC,KAAK,SAAU,CAAEP,SADvB,cACjBQ,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,qDAIhBC,EAAW,uCAAG,sBAAAL,EAAA,kEAClBF,EADkB,SACIC,IADJ,6EAAH,qDAIXO,EAAe,uCAAG,4BAAAN,EAAA,sEACHC,IAAMM,IAAI,oBADP,cAChBC,EADgB,yBAEfA,EAAKJ,MAFU,2CAAH,qDAKfK,EAAY,uCAAG,sBAAAT,EAAA,kEACnBF,EADmB,SACGQ,IADH,6EAAH,qDAIlB,OACE,oCACE,kBAACI,EAAA,EAAD,MACA,kBAACnC,EAAD,KACE,kBAACoC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC1B,EAAD,CAAS2B,UAAW,GAClB,kBAACtB,EAAD,KACE,kBAACuB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,+BAGA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,2BAIF,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CACEP,QAAQ,WACRQ,GAAG,iBACHC,MAAM,qBACNC,SAzCK,SAACC,GACpB9B,EAAQ8B,EAAEC,OAAOC,QAyCHC,WAAS,KAGb,kBAACZ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACS,EAAA,EAAD,CACEf,QAAQ,WACRgB,MAAM,UACNC,KAAK,QACLC,UAAW,kBAAC,IAAD,MACXC,QAAS7B,GALX,kBAUF,kBAACY,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACP,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GAA5C,sCAIF,kBAACC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACS,EAAA,EAAD,CACEf,QAAQ,WACRgB,MAAM,YACNC,KAAK,QACLC,UAAW,kBAAC,IAAD,MACXC,QAASzB,GALX,oBAUF,kBAACQ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACP,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GACzCnB,SCpGCsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjD,EAAD,OAEFkD,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f7265d8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { styled } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\n\nconst StContainer = styled(Box)({\n  backgroundImage: 'url(https://wallpaperxyz.com/wp-content/uploads/Flat-HD-Wallpapers-Free-Download-Wallpaperxyz.com-14.jpg)',\n  backgroundRepeat: 'no-repeat',\n  backgroundPosition: 'center center',\n  backgroundSize: 'cover',\n  backgroundAttachment: 'fixed',\n  height: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n});\n\nconst StPaper = styled(Paper)({\n  textAlign: 'center',\n  padding: '3rem',\n  background: 'rgba(255,255,255,0.2)',\n});\nconst TextHeader = styled('div')({\n  marginBottom: '3rem',\n});\n\nexport default function App() {\n  const  [code, setCode]  = useState('');\n  const [testResponse, setTestResponse] = useState('');\n\n  const handleChange = (e) => {\n    setCode(e.target.value);\n  }\n\n  const handleStartFetch = async() => {\n    const response = await axios.post('/start', { code  });\n    return response.data;\n  }\n  const handleClick = async() => {\n    setTestResponse(await handleStartFetch());\n  }\n\n  const handleTestFetch = async () => {\n    const test = await axios.get('/test-connection');\n    return test.data;\n  }\n\n  const handle2Click = async() => {\n    setTestResponse(await handleTestFetch());\n  }\n\n  return (\n    <>\n      <CssBaseline />\n      <StContainer>\n        <Container maxWidth=\"sm\">\n          <StPaper elevation={5}>\n            <TextHeader>\n              <Typography variant=\"h4\" gutterBottom>\n                Populate metafield to Store\n              </Typography>\n              <Typography variant=\"h6\" gutterBottom>\n                Recurly active members\n              </Typography>\n            </TextHeader>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  id=\"outlined-basic\"\n                  label=\"Enter Key to Start\"\n                  onChange={handleChange}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  size=\"large\"\n                  startIcon={<PlayArrowIcon />}\n                  onClick={handleClick}\n                >\n                  Start Process\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  This process take time to finish.\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  size=\"large\"\n                  startIcon={<HourglassEmptyIcon />}\n                  onClick={handle2Click}\n                >\n                  Test Connection\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  {testResponse}\n                </Typography>\n              </Grid>\n            </Grid>\n          </StPaper>\n        </Container>\n      </StContainer>\n    </>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}